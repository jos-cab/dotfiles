# ===================================================================\n# == Options\n# ===================================================================\n\n# Which viewmode should be used?  Possible values are:\n#     miller: Use miller columns which show multiple levels of the hierarchy\n#     multipane: Midnight-commander like multipane view showing all tabs next\n#                to each other\nset viewmode miller\n#set viewmode multipane\n\n# How many columns are there, and what are their relative widths?\nset column_ratios 1,3,4\n\n# Which files should be hidden? (regular expression)\nset hidden_filter ^\\.|\\.(?:pyc|pyo|bak|swp)$|^lost\\+found$|^__(py)?cache__$\n\n# Show hidden files? You can toggle this by typing 'zh'\nset show_hidden false\n\n# Ask for a confirmation when running the \"delete\" command?\n# Valid values are \"always\", \"never\", \"multiple\" (default)\n# With \"multiple\", ranger will ask only if you delete multiple files at once.\nset confirm_on_delete multiple\n\n# Use non-default path for file preview script?\n# ranger ships with scope.sh, a script that calls external programs (see\n# README.md for dependencies) to preview images, archives, etc.\n#set preview_script ~/.config/ranger/scope.sh\n\n# Use the external preview script or display simple plain text or image previews?\nset use_preview_script true\n\n# Automatically count files in the directory, even before entering them?\nset automatically_count_files true\n\n# Open all images in this directory when running certain image viewers\n# like feh or sxiv?  You can still open selected files by marking them.\nset open_all_images true\n\n# Be aware of version control systems and display information.\nset vcs_aware false\n\n# State of the four backends git, hg, bzr, svn. The possible states are\n# disabled, local (only show local info), enabled (show local and remote\n# information).\nset vcs_backend_git enabled\nset vcs_backend_hg disabled\nset vcs_backend_bzr disabled\nset vcs_backend_svn disabled\n\n# Truncate the long commit messages to this length when shown in the statusbar.\nset vcs_msg_length 50\n\n# Use one of the supported image preview protocols\nset preview_images false\n\n# Set the preview image method. Supported methods:\n#\n# * w3m (default):\n#   Preview images in full color with the external command \"w3mimgpreview\"?\n#   This requires the console web browser \"w3m\" and a supported terminal.\n#   It has been successfully tested with \"xterm\" and \"urxvt\" without tmux.\n#\n# * iterm2:\n#   Preview images in full color using iTerm2 image previews\n#   (http://iterm2.com/images.html). This requires using iTerm2 compiled\n#   with image preview support.\n#\n#   This feature relies on the dimensions of the terminal's font.  By default, a\n#   width of 8 and height of 11 are used.  To use other values, set the options\n#   iterm2_font_width and iterm2_font_height to the desired values.\n#\n# * terminology:\n#   Previews images in full color in the terminology terminal emulator.\n#   Supports a wide variety of formats, even vector graphics like svg.\n#\n# * urxvt:\n#   Preview images in full color using urxvt image backgrounds. This\n#   requires using urxvt compiled with pixbuf support.\n#\n# * urxvt-full:\n#   The same as urxvt but utilizing not only the preview pane but the\n#   whole terminal window.\n#\n# * kitty:\n#   Preview images in full color using kitty image protocol.\n#   Requires python PIL or pillow library.\n#   If ranger does not share the local filesystem with kitty\n#   the transfer method is changed to encode the whole image;\n#   while slower, this allows remote previews,\n#   for example during an ssh session.\n#   Tmux is unsupported.\n#\n# * ueberzug:\n#   Preview images in full color with the external command \"ueberzug\".\n#   Images are shown by using a child window.\n#   Only for users who run X11 in GNU/Linux.\nset preview_images_method w3m\n\n# Delay in seconds before displaying an image with the w3m method.\n# Increase it in case of experiencing display corruption.\nset w3m_delay 0.02\n\n# Manually adjust the w3mimg offset when using a terminal which needs this\nset w3m_offset 0\n\n# Default iTerm2 font size (see: preview_images_method: iterm2)\nset iterm2_font_width 8\nset iterm2_font_height 11\n\n# Use a unicode \"...\" character to mark cut-off filenames?\nset unicode_ellipsis false\n\n# BIDI support - try to properly display file names in RTL languages (Hebrew, Arabic).\n# Requires the python-bidi pip package\nset bidi_support false\n\n# Show dotfiles in the bookmark preview box?\nset show_hidden_bookmarks true\n\n# Which colorscheme to use?  These colorschemes are available by default:\n# default, jungle, snow, solarized\nset colorscheme catppuccin\n\n# Preview files on the rightmost column?\n# And collapse (shrink) the last column if there's nothing to preview?\nset preview_files true\nset preview_directories true\nset collapse_preview true\n\n# Wrap long lines in plain text previews?\nset wrap_plaintext_previews false\n\n# Save the console history on exit?\nset save_console_history true\n\n# Draw the status bar on top of the browser window (default: bottom)\nset status_bar_on_top false\n\n# Draw a progress bar in the status bar which displays the average state of all\n# currently running tasks which support progress bars?\nset draw_progress_bar_in_status_bar true\n\n# Draw borders around columns? (separators, outline, both, or none)\n# Separators are vertical lines between columns.\n# Outline draws a box around all the columns.\n# Both combines the two.\nset draw_borders none\n\n# Display the directory name in tabs?\nset dirname_in_tabs false\n\n# Enable the mouse support?\nset mouse_enabled true\n\n# Display the file size in the main column or status bar?\nset display_size_in_main_column true\nset display_size_in_status_bar true\n\n# Display the free disk space in the status bar?\nset display_free_space_in_status_bar true\n\n# Display files tags in all columns or only in main column?\nset display_tags_in_all_columns true\n\n# Set a title for the window? Updates both `WM_NAME` and `WM_ICON_NAME`\nset update_title false\n\n# Set the tmux/screen window-name to \"ranger\"?\nset update_tmux_title true\n\n# Shorten the title if it gets long?  The number defines how many\n# directories are displayed at once, 0 turns off this feature.\nset shorten_title 3\n\n# Show hostname in titlebar?\nset hostname_in_titlebar true\n\n# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?\nset tilde_in_titlebar false\n\n# How many directory-changes or console-commands should be kept in history?\nset max_history_size 20\nset max_console_history_size 50\n\n# Try to keep so much space between the top/bottom border when scrolling:\nset scroll_offset 8\n\n# Flush the input after each key hit?  (Noticeable when ranger lags)\nset flushinput true\n\n# Padding on the right when there's no preview?\n# This allows you to click into the space to run the file.\nset padding_right true\n\n# Save bookmarks (used with mX and `X) instantly?\n# This helps to synchronize bookmarks between multiple ranger\n# instances but leads to *slight* performance loss.\n# When false, bookmarks are saved when ranger is exited.\nset autosave_bookmarks true\n\n# Save the \"`\" bookmark to disk.  This can be used to switch to the last\n# directory by typing \"``\".\nset save_backtick_bookmark true\n\n# You can display the \"real\" cumulative size of directories by using the\n# command :get_cumulative_size or typing \"dc\".  The size is expensive to\n# calculate and will not be updated automatically.  You can choose\n# to update it automatically though by turning on this option:\nset autoupdate_cumulative_size false\n\n# Turning this on makes sense for screen readers:\nset show_cursor false\n\n# One of: size, natural, basename, atime, ctime, mtime, type, random\nset sort natural\n\n# Additional sorting options\nset sort_reverse false\nset sort_case_insensitive true\nset sort_directories_first true\nset sort_unicode false\n\n# Enable this if key combinations with the Alt Key don't work for you.\n# (Especially on xterm)\nset xterm_alt_key false\n\n# Whether to include bookmarks in cd command\nset cd_bookmarks true\n\n# Changes case sensitivity for the cd command tab completion\nset cd_tab_case sensitive\n\n# Use fuzzy tab completion with the \"cd\" command. For example,\n# \":cd /u/lo/b<tab>\" expands to \":cd /u/lo/bin\".\nset cd_tab_fuzzy false\n\n# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to\n# disable this feature.\nset preview_max_size 0\n\n# The key hint lists up to this size have their sublists expanded.\n# Otherwise the submaps are replaced with \"...\".\nset hint_collapse_threshold 10\n\n# Add the highlighted file to the path in the titlebar\nset show_selection_in_titlebar true\n\n# The delay that ranger idly waits for user input, in milliseconds, with a\n# resolution of 100ms.  Lower delay reduces lag between directory updates but\n# increases CPU load.\nset idle_delay 2000\n\n# When the metadata manager module looks for metadata, should it only look for\n# a \".metadata.json\" file in the current directory, or do a deep search and\n# check all directories above the current one as well?\nset metadata_deep_search false\n\n# Clear all existing filters when leaving a directory\nset clear_filters_on_dir_change false\n\n# Disable displaying line numbers in main column.\n# Possible values: false, absolute, relative.\nset line_numbers false\n\n# When line_numbers=relative show the absolute line number in the\n# current line.\nset relative_current_zero false\n\n# Start line numbers from 1 instead of 0\nset one_indexed false\n\n# Save tabs on exit\nset save_tabs_on_exit false\n\n# Enable scroll wrapping - moving down while on the last item will wrap around to\n# the top and vice versa.\nset wrap_scroll false\n\n# Set the global_inode_type_filter to nothing.  Possible options: d, f and l for\n# directories, files and symlinks respectively.\nset global_inode_type_filter\n\n# This setting allows to freeze the list of files to save I/O bandwidth.  It\n# should be 'false' during start-up, but you can toggle it by pressing F.\nset freeze_files false\n\n# Print file sizes in bytes instead of the default human-readable format.\nset size_in_bytes false\n\n# Warn at startup if RANGER_LEVEL env var is greater than 0, in other words\n# give a warning when you nest ranger in a subshell started by ranger.\n# Special value \"error\" makes the warning more visible.\nset nested_ranger_warning true# ===================================================================
# == Command Aliases in the Console
# ===================================================================

alias e     edit
alias q     quit
alias q!    quit!
alias qa    quitall
alias qa!   quitall!
alias qall  quitall
alias qall! quitall!
alias setl  setlocal

alias filter     scout -prts
alias find       scout -aets
alias mark       scout -mr
alias unmark     scout -Mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefklst# ===================================================================
# == Define keys for the browser
# ===================================================================

# Basic
map     Q quitall
map     q quit
copymap q ZZ ZQ

map R     reload_cwd
map F     set freeze_files!
map <C-r> reset
map <C-l> redraw_window
map <C-c> abort
map <esc> change_mode normal
map ~ set viewmode!

map i display_file
map <A-j> scroll_preview 1
map <A-k> scroll_preview -1
map ? help
map W display_log
map w taskview_open
map S shell $SHELL

map :  console
map ;  console
map !  console shell%space
map @  console -p6 shell  %%s
map #  console shell -p%space
map s  console shell%space
map r  chain draw_possible_programs; console open_with%space
map f  console find%space
map cd console cd%space

map <C-p> chain console; eval fm.ui.console.history_move(-1)

# Change the line mode
map Mf linemode filename
map Mi linemode fileinfo
map Mm linemode mtime
map Mh linemode humanreadablemtime
map Mp linemode permissions
map Ms linemode sizemtime
map MH linemode sizehumanreadablemtime
map Mt linemode metatitle

# Tagging / Marking
map t       tag_toggle
map ut      tag_remove
map "<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
map v       mark_files all=True toggle=True
map uv      mark_files all=True val=False
map V       toggle_visual_mode
map uV      toggle_visual_mode reverse=True

# For the nostalgics: Midnight Commander bindings
map <F1> help
map <F2> rename_append
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir%space
map <F8> console delete
#map <F8> console trash
map <F10> exit

# In case you work on a keyboard with dvorak layout
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <CR>       move right=1
#map <DELETE>   console delete
map <INSERT>   console touch%space

# VIM-like
copymap <UP>       k
copymap <DOWN>     j
copymap <LEFT>     h
copymap <RIGHT>    l
copymap <HOME>     gg
copymap <END>      G
copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>

map J  move down=0.5  pages=True
map K  move up=0.5    pages=True
copymap J <C-D>
copymap K <C-U>

# Jumping around
map H     history_go -1
map L     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse
map {     traverse_backwards
map )     jump_non

map gh cd ~
map ge cd /etc
map gu cd /usr
map gd cd /dev
map gl cd -r .
map gL cd -r %f
map go cd /opt
map gv cd /var
map gm cd /media
map gi eval fm.cd('/run/media/' + os.getenv('USER'))
map gM cd /mnt
map gs cd /srv
map gp cd /tmp
map gr cd /
map gR eval fm.cd(ranger.RANGERDIR)
map g/ cd /
map g? cd /usr/share/doc/ranger

# External Programs
map E  edit
map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
map yp yank path
map yd yank dir
map yn yank name
map y. yank name_without_extension

# Filesystem Operations
map =  chmod

map cw console rename%space
map a  rename_append
map A  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map I  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)

map pp paste
map po paste overwrite=True
map pP paste append=True
map pO paste overwrite=True append=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree
map pd console paste dest=
map p`<any> paste dest=%any_path
map p'<any> paste dest=%any_path

map dD console delete
map dT console trash

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove
map dt cut mode=toggle

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove
map yt copy mode=toggle

# Temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching
map /  console search%space
map n  search_next
map N  search_next forward=False
map ct search_next order=tag
map cs search_next order=size
map ci search_next order=mimetype
map cc search_next order=ctime
map cm search_next order=mtime
map ca search_next order=atime

# Tabs
map <C-n>     tab_new
map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map gt        tab_move 1
map gT        tab_move -1
map gn        tab_new
map gc        tab_close
map uq        tab_restore
map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9
map <a-r>     tab_shift 1
map <a-l>     tab_shift -1

# Sorting
map or set sort_reverse!
map oz set sort=random
map os chain set sort=size;      set sort_reverse=False
map ob chain set sort=basename;  set sort_reverse=False
map on chain set sort=natural;   set sort_reverse=False
map om chain set sort=mtime;     set sort_reverse=False
map oc chain set sort=ctime;     set sort_reverse=False
map oa chain set sort=atime;     set sort_reverse=False
map ot chain set sort=type;      set sort_reverse=False
map oe chain set sort=extension; set sort_reverse=False

map oS chain set sort=size;      set sort_reverse=True
map oB chain set sort=basename;  set sort_reverse=True
map oN chain set sort=natural;   set sort_reverse=True
map oM chain set sort=mtime;     set sort_reverse=True
map oC chain set sort=ctime;     set sort_reverse=True
map oA chain set sort=atime;     set sort_reverse=True
map oT chain set sort=type;      set sort_reverse=True
map oE chain set sort=extension; set sort_reverse=True

map dc get_cumulative_size

# Settings
map zc    set collapse_preview!
map zd    set sort_directories_first!
map zh    set show_hidden!
map <C-h> set show_hidden!
copymap <C-h> <backspace>
copymap <backspace> <backspace2>
map zI    set flushinput!
map zi    set preview_images!
map zm    set mouse_enabled!
map zp    set preview_files!
map zP    set preview_directories!
map zs    set sort_case_insensitive!
map zu    set autoupdate_cumulative_size!
map zv    set use_preview_script!
map zf    console filter%space
copymap zf zz

# Filter stack
map .d filter_stack add type d
map .f filter_stack add type f
map .l filter_stack add type l
map .m console filter_stack add mime%space
map .n console filter_stack add name%space
map .# console filter_stack add hash%space
map ." filter_stack add duplicate
map .' filter_stack add unique
map .| filter_stack add or
map .& filter_stack add and
map .! filter_stack add not
map .r filter_stack rotate
map .c filter_stack clear
map .* filter_stack decompose
map .p filter_stack pop
map .. filter_stack show

# Bookmarks
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
map um<any> unset_bookmark %any

map m<bg>   draw_bookmarks
copymap m<bg>  um<bg> `<bg> '<bg>

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)
cmap <a-b> eval fm.ui.console.move_word(left=1)
cmap <a-f> eval fm.ui.console.move_word(right=1)

copycmap <a-b> <a-left>
copycmap <a-f> <a-right>

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# And of course the emacs way
copycmap <ESC>       <C-g>
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>

# Basic
pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q i <F3>
pmap E      edit_file# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>